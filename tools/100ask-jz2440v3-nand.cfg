# Target configuration for the Samsung 2440 system on chip
# Tested on a S3C2440 JZ2440 board
# Processor       : ARM920Tid(wb) rev 0 (v4l)
# Info:   JTAG tap: s3c2440.cpu tap/device found: 0x0032409d (Manufacturer: 0x04e, Part: 0x0324, Version: 0x0)

if { [info exists CHIPNAME] } {
   set  _CHIPNAME $CHIPNAME
} else {
   set  _CHIPNAME s3c2440
}

if { [info exists ENDIAN] } {
   set  _ENDIAN $ENDIAN
} else {
  # this defaults to a bigendian
   set  _ENDIAN little
}

if { [info exists CPUTAPID] } {
   set _CPUTAPID $CPUTAPID
} else {
   set _CPUTAPID 0x0032409d
}
 
# jtag scan chain
jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0x0f -expected-id $_CPUTAPID
 
set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME arm920t -endian $_ENDIAN -chain-position $_TARGETNAME
$_TARGETNAME configure -work-area-phys 0x40000000 -work-area-size 0x1000 -work-area-backup 1

# reset configuration
adapter srst delay 100
jtag_ntrst_delay 100
reset_config trst_and_srst

#-------------------------------------------------------------------------
# JTAG ADAPTER SPECIFIC
#-------------------------------------------------------------------------

adapter speed 12000

#-------------------------------------------------------------------------
# JZ2440 SPECIFIC
#-------------------------------------------------------------------------

nand device 0 s3c2440 $_TARGETNAME

adapter srst delay 100
jtag_ntrst_delay 100
reset_config trst_and_srst
init

echo " "
echo "-------------------------------------------"
echo "--- login with - telnet localhost 4444  ---"
echo "--- then type help_2440                 ---"
echo "-------------------------------------------"
echo " "

proc init_2440 { } {

   halt
   s3c2440.cpu curstate

   #-----------------------------------------------
   # Set Processor Clocks - mini2440 xtal=12mHz
   # we set main clock for 405mHZ
   # we set the USB Clock for 48mHz
   # OM2 OM3 pulled to ground so main clock and
   # usb clock are off 12mHz xtal
   #-----------------------------------------------

   mww phys 0x4C000014 0x00000005 ;#  Clock Divider control Reg
   mww phys 0x4C000000 0xFFFFFFFF ;#  LOCKTIME count register
   mww phys 0x4C000008 0x00038022 ;#  UPPLCON  USB clock config Reg
   mww phys 0x4C000004 0x0007F021 ;#  MPPLCON  Proc clock config Reg

   #-----------------------------------------------
   # Configure Memory controller
   # BWSCON configures all banks, NAND, NOR, DRAM
   # DRAM - 64MB - 32 bit bus, uses BANKCON6 BANKCON7
   #-----------------------------------------------

   mww phys 0x48000000 0x22111112 ;#  BWSCON - Bank and Bus Width
   mww phys 0x48000010 0x00001112 ;#  BANKCON4 - ?
   mww phys 0x4800001c 0x00018009 ;#  BANKCON6 - DRAM
   mww phys 0x48000020 0x00018009 ;#  BANKCON7 - DRAM
   mww phys 0x48000024 0x008E04EB ;#  REFRESH  - DRAM
   mww phys 0x48000028 0x000000B2 ;#  BANKSIZE - DRAM
   mww phys 0x4800002C 0x00000030 ;#  MRSRB6 - DRAM
   mww phys 0x48000030 0x00000030 ;#  MRSRB7 - DRAM
}

proc flash_config { } {

    #-----------------------------------------
    # Finish Flash Configuration
    #-----------------------------------------

    halt

    # flash configuration (NAND 256MiB 3.3V 8-bit (Samsung) pagesize: 2048, buswidth: 8, blocksize: 131072, blocks: 2048)
    nand probe 0
    nand list
}

proc flash_uboot { } {

	# flash the u-Boot binary and reboot into it
	init_2440
	flash_config
	nand erase 0 0x0 0x40000
	nand write 0 build/100ask_jz2440.bin 0 oob_softecc_kw
	resume
}

# fix it
proc load_uboot { } {
 
 	init_2440
	echo "Loading /tftpboot/u-boot-nand512.bin"
	load_image /tftpboot/u-boot-nand512.bin 0x33f80000 bin
	echo "Verifying image...."
	verify_image /tftpboot/u-boot-nand512.bin 0x33f80000 bin
	echo "jumping to u-boot"

   reg 0 0
   reg 1 0
   reg 2 0
   reg 3 0
   reg 4 0x33f80000
   resume 0x33f80000
}

proc help_2440 {} {
   echo " "
   echo " "
   echo "-----------------------------------------------------------"
   echo "---- The following jz2440 funcs are supported        ----"
   echo "----   init_2440 - initialize clocks, DRAM, IO         ----"
   echo "----   flash_config - configures nand flash            ----"
   echo "----   load_uboot - loads uboot into ram               ----"
   echo "----   flash_uboot - flashes uboot to nand (untested)  ----"
   echo "----   help_2440 - this help display                   ----"
   echo "-----------------------------------------------------------"
   echo " "
   echo " "
}

#----------------------------------------------------------------------------
#----------------------------------- END ------------------------------------
#----------------------------------------------------------------------------
